//1. отключить выполнение фоновых заданий
//2. поменять константы

//Возм действия
//- удаление
//- очистка рекизитов

#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнициализацияНастроекНаСервере();
	РежимОбработки = УстановитьРежимОбработки(Элементы.ДекорацияЭтоКопияИБ.Видимость);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыСервисаПоУмолчанию());
	РежимОбработкиПриИзменении(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимОбработкиПриИзменении(Элемент)
	
	Если РежимОбработки = ПодготовкаДанных() Тогда
		ИнициализироватьРежимПодготовкиДанных();
	ИначеЕсли РежимОбработки = ОчисткаБазы() Тогда
		ИнициализироватьРежимОчисткиБазы();
	Иначе
		ВызватьИсключение "ru='Установлен неизвестный режим обработки'";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМетаданныеКонфигурации

&НаКлиенте
Процедура МетаданныеКонфигурацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Элемент.ТекущиеДанные.ПолноеИмя) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаКонфигурация.Видимость = Ложь;
	Элементы.ГруппаНастройка.Видимость = Истина;
	
	ИзменяемыеДанные.Очистить();
	
	Если СтрНайти(НРег(Элемент.ТекущиеДанные.ПолноеИмя), "константа")>0 Тогда
		нс = ИзменяемыеДанные.Добавить();
		нс.ТекущееЗначение = ЗначениеКонстанты(Элемент.ТекущиеДанные.Имя);
		нс.Операция = ОчисткаРеквизитов();
	КонецЕсли;
	
	Элементы.ДекорацияРедактируемыйТип.Заголовок = Элемент.ТекущиеДанные.ПолноеИмя;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИзменяемыеДанные

&НаКлиенте
Процедура ИзменяемыеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(НРег(Элементы.ДекорацияРедактируемыйТип.Заголовок), "справочник")>0 Тогда 
		текТип =Элементы.ДекорацияРедактируемыйТип.Заголовок;
		ТипСтрокой = СтрЗаменить(текТип, "Справочник", "СправочникСсылка");
		Элемент.ПодчиненныеЭлементы.ИзменяемыеДанныеТекущееЗначение.ОграничениеТипа = Новый ОписаниеТипов(ТипСтрокой);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменяемыеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ИзменяемыеДанныеОперацияПриИзменении(Элемент)
	
	Если Элемент.ТекстРедактирования = Удаление() Тогда
		Элементы.ИзменяемыеДанные.ПодчиненныеЭлементы.ИзменяемыеДанныеЗначение.ТолькоПросмотр = Истина;
	ИначеЕсли Элемент.ТекстРедактирования = ОчисткаРеквизитов() Тогда
		
	ИначеЕсли Элемент.ТекстРедактирования = ЗаменаСодержимого() Тогда
		Если Не ЭтоПримитивныйТип(Элемент.Родитель.ТекущиеДанные.ТекущееЗначение) Тогда
			Элементы.ИзменяемыеДанные.ПодчиненныеЭлементы.ИзменяемыеДанныеЗначение.ТолькоПросмотр = Истина;
		КонецЕсли;		
	Иначе
		ВызватьИсключение "неизвестная команда";
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура НастройкаГотова(Команда)
	
	Элементы.ГруппаКонфигурация.Видимость = Истина;
	Элементы.ГруппаНастройка.Видимость = Ложь;
	
	Для Каждого стрНастройки из ИзменяемыеДанные Цикл
		
		ДобавитьЗаписьКОбщемуСписку(Элементы.ДекорацияРедактируемыйТип.Заголовок,
							стрНастройки.ТекущееЗначение,
							стрНастройки.Операция,
							стрНастройки.НовоеЗначение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКДеревуМетаданных(Команда)
	
	Элементы.ГруппаКонфигурация.Видимость = Истина;
	Элементы.ГруппаНастройка.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройки(Команда)
	
	Запрос = Новый HTTPЗапрос;
	Запрос.АдресРесурса = АдресAPIv1();
	
	Ответ = НовоеHTTPСоединение().Получить(Запрос);
	Действия = Ответ.ПолучитьТелоКакСтроку();
	ВосстановитьНастройки(Действия);	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНовыеНастройки(Команда)
		
	Запрос = Новый HTTPЗапрос;
	Запрос.АдресРесурса = "api/v1/upld/";
	Запрос.Заголовки.Вставить("base", ИмяТекущейБазы);
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	Запрос.УстановитьТелоИзСтроки(СформироватьДЖСОНПоТаблице(), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Ответ = НовоеHTTPСоединение().ОтправитьДляОбработки(Запрос);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодготовкуБДПоНастройкам(Команда)
	
	Состояние("Отключаю фоновые задания", 30);
	ОтключитьФоновыеЗадания();
	
	Состояние("Выполняю очистку данных", 60);
	ВыполнитьПодготовкуДанных();
	
	Состояние("Готово", 100);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ВосстановитьНастройки(НастройкиСтрокой)
	
	чтениеДЖСОН = Новый ЧтениеJSON;
	чтениеДЖСОН.УстановитьСтроку(НастройкиСтрокой);
	прочитанныеДанные = ПрочитатьJSON(чтениеДЖСОН, ложь);
	
	//прочитанныеДанные = чтениеДЖСОН.Закрыть();
	
	Если ТипЗнч(прочитанныеДанные) <> Тип("Массив") Тогда
		ВызватьИсключение "Неизвестный формат";
	КонецЕсли;
	
	Для каждого прочДанные из прочитанныеДанные Цикл
		
		тНастройка = ВсеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(тНастройка, прочДанные);
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДЖСОНПоТаблице()
	
	табл = ТаблицаЗначенийВМассив(ВсеДанные);
	НастройкиБД = Новый Структура;
	НастройкиБД.Вставить("config", табл);
	
	ЗаписьДЖСОН = Новый ЗаписьJSON;
	ЗаписьДЖСОН.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьДЖСОН, НастройкиБД);
	
	Возврат ЗаписьДЖСОН.Закрыть();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеКонстанты(Имя)
	
	Возврат Константы[Имя].Получить();
	
КонецФункции

&НаКлиенте
Функция ДобавитьЗаписьКОбщемуСписку(ТипДанных, СтароеЗначение, Операция, НовоеЗначение)
	
	НоваяЗапись = ВсеДанные.Добавить();
	НоваяЗапись.ТипИмя = ТипДанных;
	НоваяЗапись.Действие = Операция;
	НоваяЗапись.Ссылка = СтароеЗначение;  
	
КонецФункции

#Область ИНИЦИАЛИЗАЦИИ_ПАРАМЕТРОВ

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСервисаПоУмолчанию()
	
	параметры = Новый Структура;
	параметры.Вставить("подключениеАдресСервера", "localhost");
	параметры.Вставить("подключениеНомерПорта", 8000);
	параметры.Вставить("подключениеПользователь", "");
	параметры.Вставить("подключениеПароль", "");
	Возврат параметры;
	
КонецФункции

&НаСервере
Процедура ИнициализацияНастроекНаСервере()
	
	ДеревоМетаданныхКонфигурации(МетаданныеКонфигурации);
	
	СтрокаСоединения = СтрРазделить(СтрокаСоединенияИнформационнойБазы(),";");
	ИмяБазы = СтрЗаменить(СтрокаСоединения[1], "Ref=", "");
	ИмяБазы = СтрЗаменить(ИмяБазы, """", "");
	ИмяТекущейБазы = ИмяБазы;

	Если СтрНачинаетсяС(ИмяТекущейБазы, "!"	) Тогда
		Элементы.ИмяТекущейБазы.ТолькоПросмотр = Ложь;
		Элементы.ИмяТекущейБазы.Заголовок = "Имя рабочей базы";
		Элементы.ДекорацияЭтоКопияИБ.Видимость = Истина;
	КонецЕсли;	
	
	
		
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьРежимПодготовкиДанных()
	
	ЭлементыРежима = Новый Соответствие;
	ЭлементыРежима.Вставить("ГруппаКонфигурация", Истина);
	ЭлементыРежима.Вставить("ГруппаНастройка", Истина);
	ЭлементыРежима.Вставить("Группа4", Истина);
	ЭлементыРежима.Вставить("ФормаПолучитьНастройки", Истина);
	ЭлементыРежима.Вставить("ВыполнитьПодготовкуБДПоНастройкам", Ложь);
	
	ИнициализироватьВидимостьЭлементовПоКоллекции(ЭлементыРежима);
	
	Элементы.ИзменяемыеДанныеОперация.СписокВыбора.ЗагрузитьЗначения(ВариантыДействийНадДанными());
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьРежимОчисткиБазы()
	
	ЭлементыРежима = Новый Соответствие;
	ЭлементыРежима.Вставить("ГруппаКонфигурация", Ложь);
	ЭлементыРежима.Вставить("ГруппаНастройка", Ложь);
	ЭлементыРежима.Вставить("ФормаПолучитьНастройки", Истина);
	ЭлементыРежима.Вставить("ФормаОтправитьНовыеНастройки", Ложь);
	
	ИнициализироватьВидимостьЭлементовПоКоллекции(ЭлементыРежима);
	
КонецПроцедуры
#КонецОбласти

#Область СЕТЕВЫЕ_ВЫЗОВЫ
&НаКлиенте
Функция НовоеHTTPСоединение()
	
	Соединение = Новый HTTPСоединение(подключениеАдресСервера, 
								подключениеНомерПорта, 
								подключениеПользователь, 
								подключениеПароль);
	Возврат Соединение;
	
КонецФункции
#КонецОбласти

// Получает дерево метаданных конфигурации с заданным отбором по объектам метаданных.
//
// Параметры:
//   Отбор - Структура - содержит значения элементов отбора.
//						Если параметр задан, то будет получено дерево метаданных в соответствии с заданным отбором:
//						Ключ - Строка - имя свойства элемента метаданных;
//						Значение - Массив - множество значений для отбора.
//
// Пример инициализации переменной "Отбор":
//
// Массив = Новый Массив;
// Массив.Добавить("Константа.ИспользоватьСинхронизациюДанных");
// Массив.Добавить("Справочник.Валюты");
// Массив.Добавить("Справочник.Организации");
// Отбор = Новый Структура;
// Отбор.Вставить("ПолноеИмя", Массив);
// 
// Возвращаемое значение:
//   ДеревоЗначений - дерево описания метаданных конфигурации.
//
Процедура ДеревоМетаданныхКонфигурации(ДеревоМетаданных) Экспорт
	Отбор = Неопределено;
	ИспользоватьОтбор = (Отбор <> Неопределено);
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Имя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Синоним");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Картинка");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("КартинкаОбъекта");
	
	НоваяСтрокаКоллекцииОбъектовМетаданных("Константы",               НСтр("ru = 'Константы'"),                 БиблиотекаКартинок.Константа,              БиблиотекаКартинок.Константа,                    КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("Справочники",             НСтр("ru = 'Справочники'"),               БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.Справочник,                   КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("Документы",               НСтр("ru = 'Документы'"),                 БиблиотекаКартинок.Документ,               БиблиотекаКартинок.ДокументОбъект,               КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыВидовХарактеристик", НСтр("ru = 'Планы видов характеристик'"), БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыСчетов",             НСтр("ru = 'Планы счетов'"),              БиблиотекаКартинок.ПланСчетов,             БиблиотекаКартинок.ПланСчетовОбъект,             КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыВидовРасчета",       НСтр("ru = 'Планы видов расчета'"),       БиблиотекаКартинок.ПланВидовРасчета,       БиблиотекаКартинок.ПланВидовРасчетаОбъект,       КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыСведений",        НСтр("ru = 'Регистры сведений'"),         БиблиотекаКартинок.РегистрСведений,        БиблиотекаКартинок.РегистрСведений,              КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыНакопления",      НСтр("ru = 'Регистры накопления'"),       БиблиотекаКартинок.РегистрНакопления,      БиблиотекаКартинок.РегистрНакопления,            КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыБухгалтерии",     НСтр("ru = 'Регистры бухгалтерии'"),      БиблиотекаКартинок.РегистрБухгалтерии,     БиблиотекаКартинок.РегистрБухгалтерии,           КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыРасчета",         НСтр("ru = 'Регистры расчета'"),          БиблиотекаКартинок.РегистрРасчета,         БиблиотекаКартинок.РегистрРасчета,               КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("БизнесПроцессы",          НСтр("ru = 'Бизнес-процессы'"),           БиблиотекаКартинок.БизнесПроцесс,          БиблиотекаКартинок.БизнесПроцессОбъект,          КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("Задачи",                  НСтр("ru = 'Задачи'"),                    БиблиотекаКартинок.Задача,                 БиблиотекаКартинок.ЗадачаОбъект,                 КоллекцииОбъектовМетаданных);
	
	// Возвращаемое значение функции.
	//ДеревоМетаданных = Новый ДеревоЗначений;
	//ДеревоМетаданных.Колонки.Добавить("Имя");
	//ДеревоМетаданных.Колонки.Добавить("ПолноеИмя");
	//ДеревоМетаданных.Колонки.Добавить("Синоним");
	//ДеревоМетаданных.Колонки.Добавить("Картинка");
	
	Для Каждого СтрокаКоллекции Из КоллекцииОбъектовМетаданных Цикл
		
		СтрокаДерева = ДеревоМетаданных.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаКоллекции);
		Для Каждого ОбъектМетаданных Из Метаданные[СтрокаКоллекции.Имя] Цикл
			
			Если ИспользоватьОтбор Тогда
				
				ОбъектПрошелФильтр = Истина;
				Для Каждого ЭлементОтбора Из Отбор Цикл
					
					Значение = ?(ВРег(ЭлементОтбора.Ключ) = ВРег("ПолноеИмя"), ОбъектМетаданных.ПолноеИмя(), ОбъектМетаданных[ЭлементОтбора.Ключ]);
					Если ЭлементОтбора.Значение.Найти(Значение) = Неопределено Тогда
						ОбъектПрошелФильтр = Ложь;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не ОбъектПрошелФильтр Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаДереваОМ = СтрокаДерева.ПолучитьЭлементы().Добавить();
			СтрокаДереваОМ.Имя       = ОбъектМетаданных.Имя;
			СтрокаДереваОМ.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			СтрокаДереваОМ.Синоним   = ОбъектМетаданных.Синоним;
			СтрокаДереваОМ.Картинка  = СтрокаКоллекции.КартинкаОбъекта;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Удаляем строки без подчиненных элементов.
	Если ИспользоватьОтбор Тогда
		
		// Используем обратный порядок обхода дерева значений.
		КоличествоЭлементовКоллекции = ДеревоМетаданных.Строки.Количество();
		
		Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
			
			ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
			СтрокаДерева = ДеревоМетаданных.Строки[ТекущийИндекс];
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				ДеревоМетаданных.Строки.Удалить(ТекущийИндекс);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	//Возврат ДеревоМетаданных;
	
КонецПроцедуры

Процедура НоваяСтрокаКоллекцииОбъектовМетаданных(Имя, Синоним, Картинка, КартинкаОбъекта, Коллекция)
	
	нс = Коллекция.Добавить();
	нс.Имя = Имя;
	нс.Синоним = Синоним;
	нс.Картинка = Картинка;
	нс.КартинкаОбъекта = КартинкаОбъекта;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВариантыДействийНадДанными()
	
	всеДействия = Новый Массив;
	всеДействия.Добавить(Удаление());
	всеДействия.Добавить(ОчисткаРеквизитов());
	
	Возврат всеДействия;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьРежимОбработки(РаботаВКопии)
	
	Режим = "";
	
	Если РаботаВКопии Тогда
		Режим = ОчисткаБазы();
	Иначе
		Режим = ПодготовкаДанных();
	КонецЕсли;
	
	Возврат Режим;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВозможныеРежимыОбработки(ЗапущеноВКопии)
	
	Режимы = Новый Массив;
	
	Если ЗапущеноВКопии Тогда
		Режимы.Добавить(ОчисткаБазы());
	Иначе
		Режимы.Добавить(ПодготовкаДанных());
	КонецЕсли;
	
	Возврат Режимы;
	
КонецФункции

#Область СТРОКОВЫЕ_КОНСТАНТЫ
&НаКлиентеНаСервереБезКонтекста
Функция ОчисткаБазы()
	
	Возврат "Очистка базы";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПодготовкаДанных()

	Возврат "Подготовка данных";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Удаление()
	
	Возврат "Удаление элемента";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОчисткаРеквизитов()
	
	Возврат "Очистка реквизитов";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КомментированиеТекста()
	
	Возврат "Комментирование текста";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаменаСодержимого()
	
	Возврат "Замена содержимого";
	
КонецФункции

&НаКлиенте
Функция АдресAPIv1()
	
	Возврат "api/v1/devset/"+ИмяТекущейБазы;
	
КонецФункции
#КонецОбласти

&НаКлиенте
Процедура ИнициализироватьВидимостьЭлементовПоКоллекции(ЭлементыРежима)
	
	Для каждого тЭлемент из ЭлементыРежима Цикл
		Элементы[тЭлемент.Ключ].Видимость = тЭлемент.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаЗначенийВМассив(Знач ТаблицаФормы) Экспорт
	
	Таблица = ТаблицаФормы.Выгрузить();
	
	Массив = Новый Массив();
	КолонкаЗначение = "Ссылка"; 
	КолонкиДляВыгрузки = СтрШаблон("ТипИмя, Действие, %1", КолонкаЗначение);	
	
	Для Каждого Строка Из Таблица Цикл
		
		НоваяСтрока = Новый Структура(КолонкиДляВыгрузки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		текЗначение = Строка[КолонкаЗначение];
		НоваяСтрока[КолонкаЗначение] = ?(ЭтоПримитивныйТип(текЗначение), текЗначение, Строка(текЗначение.УникальныйИдентификатор()));
		Массив.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат Массив;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПримитивныйТип(ПроверяемоеЗначение)
	
	текТип = ТипЗнч(ПроверяемоеЗначение);
	
	ПримитивныйТип = (текТип = Тип("Число")
						или текТип = Тип("Дата")
						или текТип = Тип("Строка")
						или текТип = Тип("Булево"));
							
	Возврат ПримитивныйТип;	
	
КонецФункции

&НаСервере
Процедура ПометитьОбъектНаУдаление(Ссылка)
	
	тОбъект = Ссылка.ПолучитьОбъект();
	
	Попытка
		тОбъект.Удалить();
	Исключение
		Попытка
			тОбъект.УстановитьПометкуУдаления(Истина);
			тОбъект.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьКонстанту(КонстантаИмя)
		
	Константы[СтрРазделить(КонстантаИмя, ".", Ложь)[1]].Установить(неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРеквизиты(Ссылка)
	
	тОбъект = Ссылка.ПолучитьОбъект();
	
	УстановитьПривилегированныйРежим(Истина);
	Для каждого тРеквизит из тОбъект.Метаданные().Реквизиты Цикл
		тОбъект[тРеквизит.Имя] = Неопределено;
	КонецЦикла;
	
	Для каждого тТЧ из тОбъект.Метаданные().ТабличныеЧасти Цикл
		тОбъект[тТЧ.Имя].Очистить();
	КонецЦикла;
	
	тОбъект.ОбменДанными.Загрузка = Истина;
	тОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаСервере
Процедура ОтключитьФоновыеЗадания()
	
	Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Использование", Истина));
	
	Для Каждого РЗ из Задания Цикл
		Если РЗ.Использование = Истина Тогда
        	РЗ.Использование = ложь;
			
			Попытка
        		РЗ.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПодготовкуДанных()
	
	Если Не ЗначениеЗаполнено(ВсеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого строка из ВсеДанные Цикл
		Если строка.Действие = Удаление() тогда
			ПометитьОбъектНаУдаление(строка.Ссылка);			
		ИначеЕсли строка.Действие = ОчисткаРеквизитов() Тогда
			Если СтрНайти(строка.ТипИмя, "Констант")>0 Тогда
				ОчиститьКонстанту(строка.ТипИмя);
			Иначе
				ОчиститьРеквизиты(строка.Ссылка);
			КонецЕсли;
		Иначе
			Сообщить("Пропускаю. Неизвестное действие");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

